-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelMojeLatte where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsMojeLatte

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsMojeLatte.Ident -> Result
transIdent x = case x of
  AbsMojeLatte.Ident string -> failure x

transProgram :: AbsMojeLatte.Program -> Result
transProgram x = case x of
  AbsMojeLatte.Program topdefs -> failure x

transTopDef :: AbsMojeLatte.TopDef -> Result
transTopDef x = case x of
  AbsMojeLatte.FnDef type_ ident args block -> failure x

transArg :: AbsMojeLatte.Arg -> Result
transArg x = case x of
  AbsMojeLatte.Arg type_ ident -> failure x

transBlock :: AbsMojeLatte.Block -> Result
transBlock x = case x of
  AbsMojeLatte.Block decls stmts -> failure x

transDecl :: AbsMojeLatte.Decl -> Result
transDecl x = case x of
  AbsMojeLatte.Decl type_ item -> failure x

transItem :: AbsMojeLatte.Item -> Result
transItem x = case x of
  AbsMojeLatte.NoInit ident -> failure x
  AbsMojeLatte.Init ident expr -> failure x

transStmt :: AbsMojeLatte.Stmt -> Result
transStmt x = case x of
  AbsMojeLatte.Empty -> failure x
  AbsMojeLatte.BStmt block -> failure x
  AbsMojeLatte.Ass lvalue expr -> failure x
  AbsMojeLatte.Incr lvalue -> failure x
  AbsMojeLatte.Decr lvalue -> failure x
  AbsMojeLatte.Ret expr -> failure x
  AbsMojeLatte.Cond expr block -> failure x
  AbsMojeLatte.CondElse expr block1 block2 -> failure x
  AbsMojeLatte.While expr block -> failure x
  AbsMojeLatte.For ident expr block -> failure x

transType :: AbsMojeLatte.Type -> Result
transType x = case x of
  AbsMojeLatte.Int -> failure x
  AbsMojeLatte.Str -> failure x
  AbsMojeLatte.Bool -> failure x

transLValue :: AbsMojeLatte.LValue -> Result
transLValue x = case x of
  AbsMojeLatte.EVar ident -> failure x

transExpr :: AbsMojeLatte.Expr -> Result
transExpr x = case x of
  AbsMojeLatte.Elval lvalue -> failure x
  AbsMojeLatte.ELitInt integer -> failure x
  AbsMojeLatte.ELitTrue -> failure x
  AbsMojeLatte.ELitFalse -> failure x
  AbsMojeLatte.EApp ident exprs -> failure x
  AbsMojeLatte.EString string -> failure x
  AbsMojeLatte.Neg expr -> failure x
  AbsMojeLatte.Not expr -> failure x
  AbsMojeLatte.EMul expr1 mulop expr2 -> failure x
  AbsMojeLatte.EAdd expr1 addop expr2 -> failure x
  AbsMojeLatte.ERel expr1 relop expr2 -> failure x
  AbsMojeLatte.EAnd expr1 expr2 -> failure x
  AbsMojeLatte.EOr expr1 expr2 -> failure x

transAddOp :: AbsMojeLatte.AddOp -> Result
transAddOp x = case x of
  AbsMojeLatte.Plus -> failure x
  AbsMojeLatte.Minus -> failure x

transMulOp :: AbsMojeLatte.MulOp -> Result
transMulOp x = case x of
  AbsMojeLatte.Times -> failure x
  AbsMojeLatte.Div -> failure x
  AbsMojeLatte.Mod -> failure x

transRelOp :: AbsMojeLatte.RelOp -> Result
transRelOp x = case x of
  AbsMojeLatte.LTH -> failure x
  AbsMojeLatte.LE -> failure x
  AbsMojeLatte.GTH -> failure x
  AbsMojeLatte.GE -> failure x
  AbsMojeLatte.EQU -> failure x
  AbsMojeLatte.NE -> failure x
