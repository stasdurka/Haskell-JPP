-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelMojeLatteBackup where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsMojeLatteBackup

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsMojeLatteBackup.Ident -> Result
transIdent x = case x of
  AbsMojeLatteBackup.Ident string -> failure x

transProgram :: AbsMojeLatteBackup.Program -> Result
transProgram x = case x of
  AbsMojeLatteBackup.Program topdefs -> failure x

transTopDef :: AbsMojeLatteBackup.TopDef -> Result
transTopDef x = case x of
  AbsMojeLatteBackup.FnDef type_ ident args block -> failure x

transArg :: AbsMojeLatteBackup.Arg -> Result
transArg x = case x of
  AbsMojeLatteBackup.Arg type_ ident -> failure x

transBlock :: AbsMojeLatteBackup.Block -> Result
transBlock x = case x of
  AbsMojeLatteBackup.Block stmts -> failure x

transStmt :: AbsMojeLatteBackup.Stmt -> Result
transStmt x = case x of
  AbsMojeLatteBackup.Empty -> failure x
  AbsMojeLatteBackup.BStmt block -> failure x
  AbsMojeLatteBackup.Decl type_ items -> failure x
  AbsMojeLatteBackup.Ass lvalue expr -> failure x
  AbsMojeLatteBackup.Incr lvalue -> failure x
  AbsMojeLatteBackup.Decr lvalue -> failure x
  AbsMojeLatteBackup.Ret expr -> failure x
  AbsMojeLatteBackup.Cond expr block -> failure x
  AbsMojeLatteBackup.CondElse expr block1 block2 -> failure x
  AbsMojeLatteBackup.While expr block -> failure x
  AbsMojeLatteBackup.For ident expr block -> failure x
  AbsMojeLatteBackup.SExp expr -> failure x

transItem :: AbsMojeLatteBackup.Item -> Result
transItem x = case x of
  AbsMojeLatteBackup.NoInit ident -> failure x
  AbsMojeLatteBackup.Init ident expr -> failure x

transType :: AbsMojeLatteBackup.Type -> Result
transType x = case x of
  AbsMojeLatteBackup.Int -> failure x
  AbsMojeLatteBackup.Str -> failure x
  AbsMojeLatteBackup.Bool -> failure x
  AbsMojeLatteBackup.Arr type_ integer -> failure x
  AbsMojeLatteBackup.Arr2 type_ -> failure x

transLValue :: AbsMojeLatteBackup.LValue -> Result
transLValue x = case x of
  AbsMojeLatteBackup.EVar ident -> failure x
  AbsMojeLatteBackup.EArrEl ident expr -> failure x

transExpr :: AbsMojeLatteBackup.Expr -> Result
transExpr x = case x of
  AbsMojeLatteBackup.Elval lvalue -> failure x
  AbsMojeLatteBackup.ELitInt integer -> failure x
  AbsMojeLatteBackup.ELitTrue -> failure x
  AbsMojeLatteBackup.ELitFalse -> failure x
  AbsMojeLatteBackup.EApp ident exprs -> failure x
  AbsMojeLatteBackup.EString string -> failure x
  AbsMojeLatteBackup.Neg expr -> failure x
  AbsMojeLatteBackup.Not expr -> failure x
  AbsMojeLatteBackup.EMul expr1 mulop expr2 -> failure x
  AbsMojeLatteBackup.EAdd expr1 addop expr2 -> failure x
  AbsMojeLatteBackup.ERel expr1 relop expr2 -> failure x
  AbsMojeLatteBackup.EAnd expr1 expr2 -> failure x
  AbsMojeLatteBackup.EOr expr1 expr2 -> failure x

transAddOp :: AbsMojeLatteBackup.AddOp -> Result
transAddOp x = case x of
  AbsMojeLatteBackup.Plus -> failure x
  AbsMojeLatteBackup.Minus -> failure x

transMulOp :: AbsMojeLatteBackup.MulOp -> Result
transMulOp x = case x of
  AbsMojeLatteBackup.Times -> failure x
  AbsMojeLatteBackup.Div -> failure x
  AbsMojeLatteBackup.Mod -> failure x

transRelOp :: AbsMojeLatteBackup.RelOp -> Result
transRelOp x = case x of
  AbsMojeLatteBackup.LTH -> failure x
  AbsMojeLatteBackup.LE -> failure x
  AbsMojeLatteBackup.GTH -> failure x
  AbsMojeLatteBackup.GE -> failure x
  AbsMojeLatteBackup.EQU -> failure x
  AbsMojeLatteBackup.NE -> failure x
